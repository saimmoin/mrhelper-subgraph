// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Funded extends ethereum.Event {
  get params(): Funded__Params {
    return new Funded__Params(this);
  }
}

export class Funded__Params {
  _event: Funded;

  constructor(event: Funded) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingLive extends ethereum.Event {
  get params(): FundingLive__Params {
    return new FundingLive__Params(this);
  }
}

export class FundingLive__Params {
  _event: FundingLive;

  constructor(event: FundingLive) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Helper__fundingDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: boolean;
  value4: boolean;
  value5: boolean;
  value6: string;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: boolean,
    value4: boolean,
    value5: boolean,
    value6: string,
    value7: BigInt,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getDuration(): BigInt {
    return this.value1;
  }

  getRecipient(): Address {
    return this.value2;
  }

  getIsAchieved(): boolean {
    return this.value3;
  }

  getIsWithdrawn(): boolean {
    return this.value4;
  }

  getIsExpired(): boolean {
    return this.value5;
  }

  getDescription(): string {
    return this.value6;
  }

  getCollectedAmount(): BigInt {
    return this.value7;
  }

  getWithdrawnAmount(): BigInt {
    return this.value8;
  }
}

export class Helper extends ethereum.SmartContract {
  static bind(address: Address): Helper {
    return new Helper("Helper", address);
  }

  fundingDetails(param0: Address): Helper__fundingDetailsResult {
    let result = super.call(
      "fundingDetails",
      "fundingDetails(address):(uint256,uint256,address,bool,bool,bool,string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Helper__fundingDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBoolean(),
      result[6].toString(),
      result[7].toBigInt(),
      result[8].toBigInt(),
    );
  }

  try_fundingDetails(
    param0: Address,
  ): ethereum.CallResult<Helper__fundingDetailsResult> {
    let result = super.tryCall(
      "fundingDetails",
      "fundingDetails(address):(uint256,uint256,address,bool,bool,bool,string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Helper__fundingDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBoolean(),
        value[6].toString(),
        value[7].toBigInt(),
        value[8].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawable(_user: Address): BigInt {
    let result = super.call("withdrawable", "withdrawable(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_withdrawable(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawable",
      "withdrawable(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _description(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _funder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
